# Built with arch: amd64 flavor: lxde image: ubuntu:18.04
#
################################################################################
# base system
################################################################################

FROM ubuntu:18.04 as system



RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list; 


# built-in packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt update \
    && apt install -y --no-install-recommends software-properties-common curl apache2-utils \
    && apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        supervisor nginx sudo net-tools zenity xz-utils \
        dbus-x11 x11-utils alsa-utils \
        mesa-utils libgl1-mesa-dri \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*
# install debs error if combine together
RUN add-apt-repository -y ppa:fcwu-tw/apps \
    && apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        xvfb x11vnc=0.9.16-1 \
        vim-tiny firefox chromium-browser ttf-ubuntu-font-family ttf-wqy-zenhei  \
    && add-apt-repository -r ppa:fcwu-tw/apps \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*

RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        lxde gtk2-engines-murrine gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine arc-theme \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*
 
 

# tini to fix subreap
ARG TINI_VERSION=v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /bin/tini
RUN chmod +x /bin/tini

# python library
COPY rootfs/usr/local/lib/web/backend/requirements.txt /tmp/
RUN apt-get update \
    && dpkg-query -W -f='${Package}\n' > /tmp/a.txt \
    && apt-get install -y python-pip python2.7-dev build-essential \
	&& pip install setuptools wheel && pip install -r /tmp/requirements.txt \
    && dpkg-query -W -f='${Package}\n' > /tmp/b.txt \
    && apt-get remove -y `diff --changed-group-format='%>' --unchanged-group-format='' /tmp/a.txt /tmp/b.txt | xargs` \
    && apt-get autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/* /tmp/a.txt /tmp/b.txt


################################################################################
# builder
################################################################################
FROM ubuntu:18.04 as builder


RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list; 


RUN apt-get update \
    && apt-get install -y --no-install-recommends curl ca-certificates gnupg patch

# nodejs
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \
    && apt-get install -y nodejs

# yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
    && apt-get update \
    && apt-get install -y yarn

# build frontend
COPY web /src/web
RUN cd /src/web \
    && yarn \
    && yarn build



################################################################################
# merge
################################################################################
FROM system
LABEL maintainer="fcwu.tw@gmail.com"

COPY --from=builder /src/web/dist/ /usr/local/lib/web/frontend/
COPY rootfs /
RUN ln -sf /usr/local/lib/web/frontend/static/websockify /usr/local/lib/web/frontend/static/novnc/utils/websockify && \
	chmod +x /usr/local/lib/web/frontend/static/websockify/run

#Install dependencies
RUN apt-get update && \
    apt-get install -y git wget python3.6 python3.6-dev \
    python3-pip virtualenv \
    xvfb build-essential libssl-dev libffi-dev sudo apt-utils unzip nano

# use host machine ssh pub and prv keys for git.tazi.io 
ARG ssh_prv_key
ARG ssh_pub_key
RUN mkdir -p /root/.ssh
RUN echo "$ssh_prv_key" > /root/.ssh/id_rsa && \
    echo "$ssh_pub_key" > /root/.ssh/id_rsa.pub && \
    chmod 600 /root/.ssh/id_rsa && \
    chmod 600 /root/.ssh/id_rsa.pub
RUN ssh-keyscan git.tazi.io >> /root/.ssh/known_hosts

# add user and group for google chrome 
# RUN groupadd -g 2000 automation
# RUN useradd -rm -d "/home/automation" -s /bin/bash -g automation -G automation -u 1000 automation
# RUN echo automation:1234 | chpasswd  
# RUN passwd -u automation
# RUN echo automation:automation | chpasswd
# RUN echo "automation ALL=(ALL) NOPASSWD:ALL">>/etc/sudoers


# Set work directory
WORKDIR /home/automation/
# Get Google Chrome deb package and install google-chrome 
RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -P /home/automation/
RUN dpkg -i /home/automation/google-chrome-stable_current_amd64.deb; apt-get -fy install

# Clone repository
RUN git clone --single-branch  --branch develop_intern git@git.tazi.io:tazi_deploy/automation-test-scenarios-kantu.git /home/automation/app

# Get Kantu-XModules
RUN wget -O kantu_xmodules.zip http://download.ui.vision/x/ui.vision-xmodules-linux-v201908.zip -P /home/automation/
# Unzip xmodules.zip and move zip file into folder
RUN unzip /home/automation/kantu_xmodules.zip -d /home/automation/kantu_xmodules
RUN mkdir -p /home/automation/kantu_xmodules/macros/
RUN mv /home/automation/kantu_xmodules.zip /home/automation/kantu_xmodules/


#mv chrome config to root config
RUN mkdir -p /root/Downloads
#RUN mkdir -p /home/automation/Downloads
RUN mkdir -p /home/automation/.config/google-chrome
RUN mkdir -p /root/.config/google-chrome
RUN cp -R /home/automation/app/google-chrome /root/.config/google-chrome
RUN mv /home/automation/app/google-chrome /home/automation/.config/
RUN mkdir -p /home/automation/app/htmls
RUN rm -rf /root/.config/google-chrome/Singleton*
RUN rm -rf /home/automation/.config/google-chrome/Singleton*
RUN /bin/bash -c "chmod +x -R /home/automation/kantu_xmodules/"
RUN cd /home/automation/kantu_xmodules && bash /home/automation/kantu_xmodules/1install.sh  
RUN mv /home/automation/app/marketing_train.csv /home/automation/
RUN mv /home/automation/app/custchurn_20k.csv /home/automation/
RUN /bin/bash -c "pip3 install -r /home/automation/app/kantu-tazi/requirements.txt"
RUN rm -rf /root/.ssh/
EXPOSE 25000
EXPOSE 80
WORKDIR /root
ENV HOME=/home/automation \
    SHELL=/bin/bash
HEALTHCHECK --interval=30s --timeout=5s CMD curl --fail http://127.0.0.1:6079/api/health
ENTRYPOINT ["/startup.sh"]
